{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AAEZ,gBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;;;0CAEsB;;AAErB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;;AAEjCT,kCAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACD,eAHD;;AAKAR,0BAAYS,SAAZ,GAAwB,aAAK;;AAE3B,oBAAI,CAAChB,UAAL,EAAgB;AACdA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC5B,0BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AAED,eAXD;;AAaAO,0BAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAJD;AAKD,aA3BM,CAAP;AA4BD;;;uCAEmBtB,U,EAAY;;AAE9BH,mBAAO0B,OAAP,CAAe,iBAAS;;AAEtB;AACA,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACA1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACA;AACA1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACD,aAPD;AAQD;;;4CAEwB;AACvB,gBAAI7B,UAAJ,EAAgB;AACZC;AACAD,2BAAa,IAAb;AACH;AACF","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes'];\r\nconst version = 2;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n  constructor() {\r\n\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory!');\r\n  }\r\n\r\n  static getConnection() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n      openRequest.onupgradeneeded = e => {\r\n\r\n        ConnectionFactory._createStore(e.target.result);\r\n      };\r\n\r\n      openRequest.onsuccess = e => {\r\n\r\n        if (!connection){\r\n          connection = e.target.result;\r\n          close = connection.close.bind(connection);\r\n          connection.close = function() {\r\n            throw new Error('Você não pode fechar diretamente a conexão!');\r\n          }\r\n        }\r\n        resolve(connection);\r\n\r\n      };\r\n\r\n      openRequest.onerror = e => {\r\n\r\n        console.log(e.target.error);\r\n        reject(e.target.error.name);\r\n      };\r\n    });\r\n  }\r\n\r\n  static _createStore(connection) {\r\n\r\n    stores.forEach(store => {\r\n\r\n      //se a store existir, exclui\r\n      if (connection.objectStoreNames.contains(store))\r\n      connection.deleteObjectStore(store);\r\n      //cria a store\r\n      connection.createObjectStore(store, {autoIncrement: true});\r\n    });\r\n  }\r\n\r\n  static closeConnection() {\r\n    if (connection) {\r\n        close();\r\n        connection = null;\r\n    }\r\n  }\r\n\r\n}\r\n"]}